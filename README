MPOP3 - a modular POP3 server
=============================

This program is a modular POP3 implementation, meaning that it supports different authentication/storage modules loadable at runtime. At the moment, I only have three, and the default config file (mpop3.conf) loads two of them by default: auth_file and storage_mbox.

AUTH MODULES

The auth modules handle username/password lookups and also username->mailboxname mappings. The functions you can override are:

	char const *_auth_attempt_login(char const *username, char const *password);

If the username and password (as supplied by USER & PASS) are correct, this should return the mailboxname. You don't need to override this if you've provided a functional _auth_password() below.

	char const *_auth_timestamp()

Returns an APOP timestamp. You should override this to return NULL if you can't support APOP, otherwise you can leave it.

	char const *_auth_password(char const *username)

This should return the actual user's password, mainly for comparison using APOP. You should override this function if you have actual passwords stored; otherwise, you should override _auth_attempt_login() above.

	char const *_auth_login(char const *username)

This actually just maps a username to a mailbox, but in most senses if this is being called then the user has successfully logged in, and so is suitable for flagging someone as logged in, if you feel inclined to do so.

	int _auth_default_login_delay()

This allows you to advertise a default login delay, via CAPA. If you return 0, it'll suppress the entry entirely (the default).

	int _auth_login_delay_needed(char const *)

Once a valid login has been confirmed, this function is called to determine whether to send an "-ERR [LOGIN-DELAY]" response. Anything nonzero will be taken to mean that the user is not allowed to log in just now. It would be sensible to return the number of seconds before the user can next log in here, although it'll never be used.

auth_file
---------

This is a simple authentication handler for reading usernames/passwords straight from a file. It's pretty much as minimal as it can get, replacing only the _auth_password() function, and it should be good for customising if you're going to be using APOP (plain-text passwords server-side).

auth_getpw
----------

This is a simple auth handler for using UNIX system passwords, replacing only _auth_attempt_login and _auth_timestamp (NULL). APOP won't work with it.

STORAGE MODULES

This is quite a lot more complicated, and it should quickly become obvious why.

	int _storage_lock_mailbox(char const *mailbox);

Called once a user logs in, this should open and lock the mailbox, and return 0 if it fails. It's also a good opportunity to parse the file (or whatever you're using), but you can get away with doing that on a just-in-time basis. You'll need to override this.

	unsigned long int _storage_message_count();

Returns the number of total number of messages in the maildrop. You'll need to override this.

	unsigned long int _storage_message_sum();

Unused.

	struct pop3_message *_storage_first_message();

Returns the first message (it's a linked list). Returning NULL here is fine, that just means there are no messages. You'll need to override this.

	struct pop3_message *_storage_message_number(unsigned long int n);

Returns the "n"th message, or NULL. You don't need to override this unless you're running your own cache (eg. an array)

	int _storage_uidl_supported();

This should return 1 if (and only if) the UIDL command is to be supported (ie, that your backend is populating the 'uidl' field). You'll need to override this if you're supplying UIDL support.

	int _storage_dump_message(struct pop3_message *, FILE *);
	int _storage_dump_message_lines(struct pop3_message *, unsigned long int, FILE *);
	int _storage_dump_headers(struct pop3_message *, FILE *);

These are all ways of telling the storage back-end to (line-by-line, if it wants to) output (byte-stuffed) either the whole message, some lines of the body, or the headers (the latter two are just used by TOP). You don't need to override any of these if you were brave enough to override the below function.

	int _storage_dump_fragment(unsigned long int from_offset, unsigned long int to_offset, unsigned long int skip_lines, unsigned long int max_lines, FILE *output);

This should output 'max_lines' lines from 'from_offset' (which only has meaning to the storage module) having skipped 'skip_lines' lines first, and going no further than 'to_offset'. That's quite a mouthful, but the purpose is to handle a pair of byte offsets marking the endpoints and to work with both RETR (skip 1 line, no [0] maximum, start at start-of-header, end at end-of-body) and TOP (skip 1 line, no maximum, start-of-header, end-of-header ... followed by skip 0 lines, maximum 'n' lines, end-of-header, end-of-body). The 1-line skipping is a quirk of mbox format, but I'm keeping it in there to simplify parsing.

	int _storage_synch();

Writes the mailbox back out, minus any flagged-deleted messages. You'll need to override this

storage_mbox
------------

This is a fully-functional 'mbox'-format storage handler, so if that's what you're after, relax. There's not much you'll need to change here. Probably the only line you'll want to change is '#define MBOX_ROOT'.

MODULE BACKEND

The modules are dlopen()ed in and then their functions are copied (effectively) into the existing symbol table. You can provide multiple modules of the same basic class, with the first module to declare a function getting its version used. Anything that's not defined by any module will use the equivalent default function, most of which do nothing, but some of which are useful (see above). I'm not currently sure if DSOs on GNU and *BSD support dynamic loading of this type, but if they do, then at some point I'll get around to adding in support for them.

WRITING YOUR OWN MODULES

Pretty much the easiest thing to do is copy one of the existing modules and edit it, but I would also advise that when making it you'll want to do "make -I<wherever the build tree is>" to make sure you get the default .mk files included.

CONFIG FILE

auth_module <filename>
storage_module <filename>

NOTES

= Can handle NULLs (^v000) in mail spools
= Can handle varied line endings in a mail spool (\n or \r\n... but fgets()/fgetln() unfortunately won't break on \r alone)

BUILDING

./configure --with-openssl
make

WHINING

There are a few cool things this conspicuously *doesn't* do, see the file 'TODO' for details.

COPYING

All the files that make up this distribution are copyright 2005 Jim Driscoll.
All rights reserved.

Please see the file 'COPYING' for further details.
